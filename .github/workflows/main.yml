name: RDP
on:
  workflow_dispatch:
jobs:
  secure-rdp:
    runs-on: windows-2025
    timeout-minutes: 3600
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ownership Verification
        run: Write-Host "ToolboxLab.xyz - RDP Workflow Ready"

      - name: Create Directories
        run: |
          New-Item -Path "D:\link subscribe youtube channel" -ItemType Directory -Force
          New-Item -Path "D:\Script" -ItemType Directory -Force
          Write-Host "Directories created"

      - name: Deploy Python Scripts
        run: |
          $script1 = 'import time
          import json
          from selenium.webdriver.chrome.options import Options
          from seleniumwire import webdriver as wire_webdriver
          
          def launch_trustworthy_profile(name, gpu, seed, port, window_x=50, window_y=50):
              print(f"Lancement: {name} (GPU: {gpu}, Port: {port})")
              
              chrome_options = Options()
              chrome_options.add_argument("--no-sandbox")
              chrome_options.add_argument("--disable-dev-shm-usage")
              chrome_options.add_argument(f"--user-data-dir=C:/temp/trustworthy_{name}")
              chrome_options.add_argument(f"--window-position={window_x},{window_y}")
              chrome_options.add_argument("--window-size=1200,800")
              
              chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
              chrome_options.add_experimental_option("useAutomationExtension", False)
              chrome_options.add_argument("--disable-blink-features=AutomationControlled")
              
              chrome_options.add_argument("--force-webrtc-ip-handling-policy=disable_non_proxied_udp")
              chrome_options.add_argument("--enforce-webrtc-ip-permission-check")
              chrome_options.add_experimental_option("prefs", {
                  "webrtc.ip_handling_policy": "disable_non_proxied_udp",
                  "webrtc.multiple_routes_enabled": False,
                  "webrtc.nonproxied_udp_enabled": False
              })
              
              tor_username = f"root-{port}"
              proxy_options = {
                  "proxy": {
                      "http": f"socks5://{tor_username}:WelcomeatTor@127.0.0.1:{port}",
                      "https": f"socks5://{tor_username}:WelcomeatTor@127.0.0.1:{port}",
                      "no_proxy": "localhost,127.0.0.1"
                  }
              }
              
              print(f"Proxy: socks5://root-{port}:WelcomeatTor@127.0.0.1:{port}")
              driver = wire_webdriver.Chrome(options=chrome_options, seleniumwire_options=proxy_options)
              
              script = """
          (() => {
            try {
              Object.defineProperty(navigator, "webdriver", { get: () => undefined });
              const badKeys = [/^(?:_?cdc_|__webdriver|selenium|webdriver|__driver)/i];
              for (const k of Object.keys(window)) {
                if (badKeys.some(r=>r.test(k))) { try { delete window[k]; } catch(e) {} }
              }
            } catch(e) {}
            console.log("Script loaded");
          })();
          """
              
              driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {"source": script})
              driver.get("https://iphey.com/")
              time.sleep(3)
              
              print(f"{name} ready!")
              return driver
          
          def main():
              print("MULTI-PROFILS TRUSTWORTHY - Proxy Residentiel USA")
              print("Format SOCKS5: socks5://root-{port}:WelcomeatTor@127.0.0.1:{port}")
              
              profiles = [
                  {"name": "USA_Profile_1", "gpu": "nvidia", "seed": 12345, "port": 65237},
                  {"name": "USA_Profile_2", "gpu": "intel", "seed": 67890, "port": 65238},
                  {"name": "USA_Profile_3", "gpu": "amd", "seed": 54321, "port": 65239}
              ]
              
              browsers = []
              
              for i, profile in enumerate(profiles):
                  try:
                      window_x = 50 + i * 50
                      window_y = 50 + i * 100
                      
                      driver = launch_trustworthy_profile(
                          profile["name"], 
                          profile["gpu"], 
                          profile["seed"], 
                          profile["port"],
                          window_x,
                          window_y
                      )
                      
                      browsers.append({"driver": driver, "name": profile["name"]})
                      
                      if i < len(profiles) - 1:
                          print("Attente 10 secondes...")
                          time.sleep(10)
                          
                  except Exception as e:
                      print(f"Erreur {profile[\"name\"]}: {e}")
              
              print(f"{len(browsers)} fenetre(s) lancee(s)")
              print("Verifiez les IPs residentielles sur iphey.com")
              
              input("Appuyez sur Entree pour fermer...")
              
              for b in browsers:
                  try:
                      b["driver"].quit()
                  except:
                      pass
          
          if __name__ == "__main__":
              main()'
          
          $script1 | Out-File -FilePath "D:\Script\FINAL_3_WINDOWS_TRUSTWORTHY.py" -Encoding UTF8
          
          $script2 = 'import tkinter as tk
          from tkinter import ttk, messagebox, scrolledtext
          import time
          
          class USAResidentialGUI:
              def __init__(self):
                  self.root = tk.Tk()
                  self.setup_gui()
              
              def setup_gui(self):
                  self.root.title("USA Residential Multi-IP Generator")
                  self.root.geometry("1000x700")
                  self.root.configure(bg="#f0f0f0")
                  
                  title_frame = tk.Frame(self.root, bg="#1976D2", height=80)
                  title_frame.pack(fill="x")
                  title_frame.pack_propagate(False)
                  
                  title_label = tk.Label(title_frame, text="USA RESIDENTIAL PROXY SYSTEM", 
                                        font=("Arial", 18, "bold"), bg="#1976D2", fg="white")
                  title_label.pack(expand=True)
                  
                  config_frame = tk.LabelFrame(self.root, text="Configuration SOCKS5", 
                                             font=("Arial", 12, "bold"), bg="#f0f0f0")
                  config_frame.pack(fill="x", padx=20, pady=20)
                  
                  tk.Label(config_frame, text="Format: socks5://root-{port}:WelcomeatTor@127.0.0.1:{port}", 
                          font=("Arial", 11, "bold"), bg="#f0f0f0", fg="#1976D2").pack(pady=10)
                  
                  button_frame = tk.Frame(self.root, bg="#f0f0f0")
                  button_frame.pack(pady=20)
                  
                  start_btn = tk.Button(button_frame, text="Start Residential System", 
                                       font=("Arial", 12, "bold"), bg="#4CAF50", fg="white",
                                       command=self.start_system)
                  start_btn.pack(side="left", padx=10)
                  
                  test_btn = tk.Button(button_frame, text="Test Proxy", 
                                      font=("Arial", 12, "bold"), bg="#FF9800", fg="white",
                                      command=self.test_proxy)
                  test_btn.pack(side="left", padx=10)
                  
                  self.status_text = scrolledtext.ScrolledText(self.root, height=20, width=100)
                  self.status_text.pack(fill="both", expand=True, padx=20, pady=(0, 20))
                  
                  self.log("USA Residential Proxy System Ready!")
                  self.log("Configuration SOCKS5: root-{port}:WelcomeatTor")
                  
              def start_system(self):
                  self.log("Starting USA Residential Proxy System...")
                  self.log("System ready for residential proxy connections!")
                  
              def test_proxy(self):
                  self.log("Testing proxy configuration...")
                  self.log("Proxy format: socks5://root-65237:WelcomeatTor@127.0.0.1:65237")
                  
              def log(self, message):
                  timestamp = time.strftime("%H:%M:%S")
                  self.status_text.insert(tk.END, f"[{timestamp}] {message}\n")
                  self.status_text.see(tk.END)
                  self.root.update()
              
              def run(self):
                  self.root.mainloop()
          
          def main():
              app = USAResidentialGUI()
              app.run()
          
          if __name__ == "__main__":
              main()'
          
          $script2 | Out-File -FilePath "D:\Script\usa_residential_gui.py" -Encoding UTF8
          
          Write-Host "Scripts created successfully"

      - name: Create Desktop Shortcuts
        run: |
          $WshShell = New-Object -comObject WScript.Shell
          
          $Shortcut1 = $WshShell.CreateShortcut("C:\Users\TOOLBOXLAP\Desktop\TRUSTWORTHY Script.lnk")
          $Shortcut1.TargetPath = "python"
          $Shortcut1.Arguments = "D:\Script\FINAL_3_WINDOWS_TRUSTWORTHY.py"
          $Shortcut1.WorkingDirectory = "D:\Script"
          $Shortcut1.Save()
          
          $Shortcut2 = $WshShell.CreateShortcut("C:\Users\TOOLBOXLAB\Desktop\USA Residential GUI.lnk")
          $Shortcut2.TargetPath = "python"
          $Shortcut2.Arguments = "D:\Script\usa_residential_gui.py"
          $Shortcut2.WorkingDirectory = "D:\Script"
          $Shortcut2.Save()
          
          Write-Host "Desktop shortcuts created"

      - name: Configure RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          $password = "admin@123"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "TOOLBOXLAP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "TOOLBOXLAP" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "TOOLBOXLAP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "TOOLBOXLAP" -ErrorAction SilentlyContinue

      - name: Install Tor Browser
        run: |
          if (Test-Path ".\tor-browser-windows-x86_64-portable-14.5.6.exe") {
              Copy-Item ".\tor-browser-windows-x86_64-portable-14.5.6.exe" "$env:TEMP\tor-installer.exe"
              Start-Process -FilePath "$env:TEMP\tor-installer.exe" -ArgumentList "/S", "/D=C:\Tor Browser" -Wait
              
              $WshShell = New-Object -comObject WScript.Shell
              $Shortcut = $WshShell.CreateShortcut("C:\Users\TOOLBOXLAP\Desktop\Tor Browser.lnk")
              $Shortcut.TargetPath = "C:\Tor Browser\Browser\firefox.exe"
              $Shortcut.WorkingDirectory = "C:\Tor Browser\Browser"
              $Shortcut.Save()
              
              Write-Host "Tor Browser installed with desktop shortcut"
          } else {
              Write-Host "Tor Browser file not found, skipping installation"
          }

      - name: Install Python and Dependencies
        run: |
          try {
              $pythonVersion = python --version
              Write-Host "Python found: $pythonVersion"
          } catch {
              $pythonUrl = "https://www.python.org/ftp/python/3.11.9/python-3.11.9-amd64.exe"
              $pythonInstaller = "$env:TEMP\python-installer.exe"
              Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller
              Start-Process -FilePath $pythonInstaller -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1" -Wait
              Remove-Item $pythonInstaller -Force
              Write-Host "Python installed"
          }
          
          python -m pip install --upgrade pip
          python -m pip install selenium selenium-wire requests pysocks stem "blinker<1.4"
          Write-Host "Python dependencies installed"

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Connect Tailscale
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned"
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "RDP connection test failed"
              exit 1
          }
          Write-Host "RDP connectivity verified"

      - name: Maintain Connection
        run: |
          Write-Host "=== RDP ACCESS READY ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: TOOLBOXLAP"
          Write-Host "Password: admin@123"
          Write-Host "========================="
          Write-Host ""
          Write-Host "Desktop Shortcuts Available:"
          Write-Host "- TRUSTWORTHY Script (Multi-browser automation)"
          Write-Host "- USA Residential GUI (Proxy interface)"
          Write-Host "- Tor Browser"
          Write-Host ""
          Write-Host "Files ready in D:\Script\"
          Write-Host "System 100% ready for use!"
          Write-Host ""
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C to terminate"
              Start-Sleep -Seconds 300
          }
